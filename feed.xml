<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/" version="0.1.0">Rust Blog</generator>
    <link href="https://blog.rust-lang.org/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/</id>
    <title>Rust Blog</title>
    <subtitle>Empowering everyone to build reliable and efficient software.</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2023-05-30T09:31:57+00:00</updated>

    
    <entry>
        <title>On the RustConf keynote</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/05/29/RustConf.html" type="text/html" title="On the RustConf keynote" />
        <published>2023-05-29T00:00:00+00:00</published>
        <updated>2023-05-29T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/05/29/RustConf.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/05/29/RustConf.html">&lt;p&gt;On May 26th 2023, &lt;a href&#x3D;&quot;https://thephd.dev/about/&quot;&gt;JeanHeyd Meneide&lt;/a&gt; announced they &lt;a href&#x3D;&quot;https://thephd.dev/i-am-no-longer-speaking-at-rustconf-2023&quot;&gt;would not speak at RustConf 2023 anymore&lt;/a&gt;. They were invited to give a keynote at the conference, only to be told two weeks later the keynote would be demoted to a normal talk, due to a decision made within the Rust project leadership.&lt;/p&gt;
&lt;p&gt;That decision was not right, and first off we want to publicly apologize for the harm we caused. We failed you JeanHeyd. The idea of downgrading a talk after the invitation was insulting, and nobody in leadership should have been willing to entertain it.&lt;/p&gt;
&lt;p&gt;Everyone in leadership chat is still working to fully figure out everything that went wrong and how we can prevent all of this from happening again. That work is not finished yet. Still, we want to share some steps we are taking to reduce the risk of something like this from happening again.&lt;/p&gt;
&lt;p&gt;The primary causes of the failure were the decision-making and communication processes of leadership chat. Leadership chat has been the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2022/10/06/governance-update.html&quot;&gt;top-level governance structure created after the previous Moderation Team resigned in late 2021&lt;/a&gt;. It’s made of all leads of top-level teams, all members of the Core Team, all project directors on the Rust Foundation board, and all current moderators. This leadership chat was meant as a short-term solution and lacked clear rules and processes for decision making and communication. This left a lot of room for misunderstandings about when a decision had actually been made and when individuals were speaking for the project versus themselves.&lt;/p&gt;
&lt;p&gt;In this post we focus on the organizational and process failure, leaving room for individuals to publicly acknowledge their own role. Nonetheless, formal rules or governance processes should not be required to identify that demoting JeanHeyd’s keynote was the wrong thing to do. The fact is that several individuals exercised poor judgment and poor communication. Recognizing their outsized role in the situation, those individuals have opted to step back from top-level governance roles, including leadership chat and the upcoming leadership council.&lt;/p&gt;
&lt;p&gt;Organizationally, within leadership chat we will enforce a strict consensus rule for all decision making, so that there is no longer ambiguity of whether something is an individual opinion or a group decision. We are going to launch the new governance council as soon as possible. We’ll assist the remaining teams to select their representatives in a timely manner, so that the new governance council can start and the current leadership chat can disband.&lt;/p&gt;
&lt;p&gt;We wish to close the post by reiterating our apology to JeanHeyd, but also the wider Rust community. You deserved better than you got from us.&lt;/p&gt;
&lt;p&gt;-- The &lt;a href&#x3D;&quot;https://github.com/rust-lang/team/blob/d4c071b86c33683845919cf27eabf33e15fb6784/teams/interim-leadership-chat.toml#L8-L25&quot;&gt;members of leadership chat&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>leadership chat membership</name>
        </author>
    </entry>
    
    <entry>
        <title>Updating Rust&#x27;s Linux musl targets</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/05/09/Updating-musl-targets.html" type="text/html" title="Updating Rust&#x27;s Linux musl targets" />
        <published>2023-05-09T00:00:00+00:00</published>
        <updated>2023-05-09T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/05/09/Updating-musl-targets.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/05/09/Updating-musl-targets.html">&lt;p&gt;Beginning with Rust 1.71 (slated for stable release on 2023-07-13), the various &lt;code&gt;*-linux-musl&lt;/code&gt; targets will &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/107129&quot;&gt;ship&lt;/a&gt; with musl 1.2.3.
These targets currently use musl 1.1.24.
While musl 1.2.3 introduces some &lt;a href&#x3D;&quot;https://musl.libc.org/releases.html&quot;&gt;new features&lt;/a&gt;, most notably &lt;a href&#x3D;&quot;https://musl.libc.org/time64.html&quot;&gt;64-bit time&lt;/a&gt; on all platforms, it is ABI compatible with earlier musl versions.&lt;/p&gt;
&lt;p&gt;As such, this change is unlikely to affect you.&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#updated-targets&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;updated-targets&quot;&gt;&lt;/a&gt;Updated targets&lt;/h1&gt;
&lt;p&gt;The following targets will be updated:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Target&lt;/th&gt;
&lt;th&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rustc/platform-support.html&quot;&gt;Support Tier&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aarch64-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2 with Host Tools&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2 with Host Tools&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arm-unknown-linux-musleabi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arm-unknown-linux-musleabihf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;armv5te-unknown-linux-musleabi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;armv7-unknown-linux-musleabi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;armv7-unknown-linux-musleabihf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i586-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i686-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mips-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mips64-unknown-linux-muslabi64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mips64el-unknown-linux-muslabi64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mipsel-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hexagon-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mips64-openwrt-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;powerpc-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;powerpc64-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;powerpc64le-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;riscv32gc-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;riscv64gc-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s390x-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;thumbv7neon-unknown-linux-musleabihf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: musl 1.2.3 does not raise the minimum required Linux kernel version for any target.&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#will-64-bit-time-break-the-libc-crate-on-32-bit-targets&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;will-64-bit-time-break-the-libc-crate-on-32-bit-targets&quot;&gt;&lt;/a&gt;Will 64-bit time break the &lt;code&gt;libc&lt;/code&gt; crate on 32-bit targets?&lt;/h1&gt;
&lt;p&gt;No, the musl project made this change carefully preserving ABI compatibility.
The &lt;code&gt;libc&lt;/code&gt; crate will continue to function correctly without modification.&lt;/p&gt;
&lt;p&gt;A future version of the &lt;code&gt;libc&lt;/code&gt; crate will &lt;a href&#x3D;&quot;https://github.com/rust-lang/libc/pull/3068&quot;&gt;update&lt;/a&gt; the definitions of time-related structures and functions to be 64-bit on all musl targets however this is blocked on the musl targets themselves first being updated.
At present, there is no anticipated date when this change will take place and care will be taken to help the Rust ecosystem transition successfully to the updated time-related definitions.&lt;/p&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rustup 1.26.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/04/25/Rustup-1.26.0.html" type="text/html" title="Announcing Rustup 1.26.0" />
        <published>2023-04-25T00:00:00+00:00</published>
        <updated>2023-04-25T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/04/25/Rustup-1.26.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/04/25/Rustup-1.26.0.html">&lt;p&gt;The rustup working group is happy to announce the release of rustup version 1.26.0. &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;Rustup&lt;/a&gt; is the recommended tool to install &lt;a href&#x3D;&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.26.0 is as easy as stopping any programs which may be using Rustup (e.g. closing your IDE) and running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain update:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;get rustup&lt;/a&gt; from the appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-new-in-rustup-1260&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-new-in-rustup-1260&quot;&gt;&lt;/a&gt;What&#x27;s new in rustup 1.26.0&lt;/h2&gt;
&lt;p&gt;This version of Rustup involves a significant number of internal cleanups, both in terms
of the Rustup code and its tests. In addition to a lot of work on the codebase
itself, due to the length of time since the last release this one has a record number
of contributors and we thank you all for your efforts and time.&lt;/p&gt;
&lt;p&gt;The headlines for this release are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add rust-analyzer as a proxy of rustup. Now you can call rust-analyzer and it will be proxied to the rust-analyzer component for the current toolchain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bump the clap dependency from 2.x to 3.x. It&#x27;s a major version bump, so there are some help text changes, but the command line interface is unchanged.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove experimental GPG signature validation and the rustup show keys command. Due to its experimental status, validating the integrity of downloaded binaries did not rely on it, and there was no option to abort the installation if a signature mismatch happened. Multiple problems with its implementation were discovered in the recent months, which led to the decision to remove the experimental code. The team is working on the design of a new signature validation scheme, which will be implemented in the future.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Full details are available in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/blob/stable/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Rustup&#x27;s documentation is also available in &lt;a href&#x3D;&quot;https://rust-lang.github.io/rustup/&quot;&gt;the rustup book&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks again to all the contributors who made rustup 1.26.0 possible!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Daniel Silverstone (kinnison)&lt;/li&gt;
&lt;li&gt;Sabrina Jewson (SabrinaJewson)&lt;/li&gt;
&lt;li&gt;Robert Collins (rbtcollins)&lt;/li&gt;
&lt;li&gt;chansuke (chansuke)&lt;/li&gt;
&lt;li&gt;Shamil (shamilsan)&lt;/li&gt;
&lt;li&gt;Oli Lalonde (olalonde)&lt;/li&gt;
&lt;li&gt;二手掉包工程师 (hi-rustin)&lt;/li&gt;
&lt;li&gt;Eric Huss (ehuss)&lt;/li&gt;
&lt;li&gt;J Balint BIRO (jbalintbiro)&lt;/li&gt;
&lt;li&gt;Easton Pillay (jedieaston)&lt;/li&gt;
&lt;li&gt;zhaixiaojuan (zhaixiaojuan)&lt;/li&gt;
&lt;li&gt;Chris Denton (ChrisDenton)&lt;/li&gt;
&lt;li&gt;Martin Geisler (mgeisler)&lt;/li&gt;
&lt;li&gt;Lucio Franco (LucioFranco)&lt;/li&gt;
&lt;li&gt;Nicholas Bishop (nicholasbishop)&lt;/li&gt;
&lt;li&gt;SADIK KUZU (sadikkuzu)&lt;/li&gt;
&lt;li&gt;darkyshiny (darkyshiny)&lt;/li&gt;
&lt;li&gt;René Dudfield (illume)&lt;/li&gt;
&lt;li&gt;Noritada Kobayashi (noritada)&lt;/li&gt;
&lt;li&gt;Mohammad AlSaleh (MoSal)&lt;/li&gt;
&lt;li&gt;Dustin Martin (dmartin)&lt;/li&gt;
&lt;li&gt;Ville Skyttä (scop)&lt;/li&gt;
&lt;li&gt;Tshepang Mbambo (tshepang)&lt;/li&gt;
&lt;li&gt;Illia Bobyr (ilya-bobyr)&lt;/li&gt;
&lt;li&gt;Vincent Rischmann (vrischmann)&lt;/li&gt;
&lt;li&gt;Alexander (Alovchin91)&lt;/li&gt;
&lt;li&gt;Daniel Brotsky (brotskydotcom)&lt;/li&gt;
&lt;li&gt;zohnannor (zohnannor)&lt;/li&gt;
&lt;li&gt;Joshua Nelson (jyn514)&lt;/li&gt;
&lt;li&gt;Prikshit Gautam (gautamprikshit1)&lt;/li&gt;
&lt;li&gt;Dylan Thacker-Smith (dylanahsmith)&lt;/li&gt;
&lt;li&gt;Jan David (jdno)&lt;/li&gt;
&lt;li&gt;Aurora (lilith13666)&lt;/li&gt;
&lt;li&gt;Pietro Albini (pietroalbini)&lt;/li&gt;
&lt;li&gt;Renovate Bot (renovate-bot)&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>The Rustup Working Group</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.69.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html" type="text/html" title="Announcing Rust 1.69.0" />
        <published>2023-04-20T00:00:00+00:00</published>
        <updated>2023-04-20T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html">&lt;p&gt;The Rust team is happy to announce a nice version of Rust, 1.69.0. Rust is a programming language empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.69.0 with:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on our website, and check out the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1690-2023-04-20&quot;&gt;detailed release notes for 1.69.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;). Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1690-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1690-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.69.0 stable&lt;/h2&gt;
&lt;p&gt;Rust 1.69.0 introduces no major new features. However, it contains many small improvements, including over 3,000 commits from over 500 contributors.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#cargo-now-suggests-to-automatically-fix-some-warnings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;cargo-now-suggests-to-automatically-fix-some-warnings&quot;&gt;&lt;/a&gt;Cargo now suggests to automatically fix some warnings&lt;/h3&gt;
&lt;p&gt;Rust 1.29.0 added the &lt;code&gt;cargo fix&lt;/code&gt; subcommand to automatically fix some simple compiler warnings. Since then, the number of warnings that can be fixed automatically continues to steadily increase. In addition, support for automatically fixing some simple Clippy warnings has also been added.&lt;/p&gt;
&lt;p&gt;In order to draw more attention to these increased capabilities, Cargo will now suggest running &lt;code&gt;cargo fix&lt;/code&gt; or &lt;code&gt;cargo clippy --fix&lt;/code&gt; when it detects warnings that are automatically fixable:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-text&quot;&gt;warning: unused import: &#x60;std::hash::Hash&#x60;
 --&amp;gt; src/main.rs:1:5
  |
1 | use std::hash::Hash;
  |     ^^^^^^^^^^^^^^^
  |
  &#x3D; note: &#x60;#[warn(unused_imports)]&#x60; on by default

warning: &#x60;foo&#x60; (bin &amp;quot;foo&amp;quot;) generated 1 warning (run &#x60;cargo fix --bin &amp;quot;foo&amp;quot;&#x60; to apply 1 suggestion)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the full Cargo invocation shown above is only necessary if you want to precisely apply fixes to a single crate. If you want to apply fixes to all the default members of a workspace, then a simple &lt;code&gt;cargo fix&lt;/code&gt; (with no additional arguments) will suffice.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#debug-information-is-not-included-in-build-scripts-by-default-anymore&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;debug-information-is-not-included-in-build-scripts-by-default-anymore&quot;&gt;&lt;/a&gt;Debug information is not included in build scripts by default anymore&lt;/h3&gt;
&lt;p&gt;To improve compilation speed, Cargo now avoids emitting debug information in build scripts by default. There will be no visible effect when build scripts execute successfully, but backtraces in build scripts will contain less information.&lt;/p&gt;
&lt;p&gt;If you want to debug a build script, you can add this snippet to your &lt;code&gt;Cargo.toml&lt;/code&gt; to emit debug information again:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-toml&quot;&gt;[profile.dev.build-override]
debug &#x3D; true
[profile.release.build-override]
debug &#x3D; true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/ffi/struct.CStr.html#method.from_bytes_until_nul&quot;&gt;&lt;code&gt;CStr::from_bytes_until_nul&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/ffi/struct.FromBytesUntilNulError.html&quot;&gt;&lt;code&gt;core::ffi::FromBytesUntilNulError&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These APIs are now stable in const contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.new&quot;&gt;&lt;code&gt;SocketAddr::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.ip&quot;&gt;&lt;code&gt;SocketAddr::ip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.port&quot;&gt;&lt;code&gt;SocketAddr::port&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.is_ipv4&quot;&gt;&lt;code&gt;SocketAddr::is_ipv4&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.is_ipv6&quot;&gt;&lt;code&gt;SocketAddr::is_ipv6&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.new&quot;&gt;&lt;code&gt;SocketAddrV4::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.ip&quot;&gt;&lt;code&gt;SocketAddrV4::ip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.port&quot;&gt;&lt;code&gt;SocketAddrV4::port&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.new&quot;&gt;&lt;code&gt;SocketAddrV6::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.ip&quot;&gt;&lt;code&gt;SocketAddrV6::ip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.port&quot;&gt;&lt;code&gt;SocketAddrV6::port&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.flowinfo&quot;&gt;&lt;code&gt;SocketAddrV6::flowinfo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.scope_id&quot;&gt;&lt;code&gt;SocketAddrV6::scope_id&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;Check out everything that changed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1690-2023-04-20&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-169-2023-04-20&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-169&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#contributors-to-1690&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1690&quot;&gt;&lt;/a&gt;Contributors to 1.69.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.69.0. We couldn&#x27;t have done it without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.69.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.68.2</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/03/28/Rust-1.68.2.html" type="text/html" title="Announcing Rust 1.68.2" />
        <published>2023-03-28T00:00:00+00:00</published>
        <updated>2023-03-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/03/28/Rust-1.68.2.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/03/28/Rust-1.68.2.html">&lt;p&gt;The Rust team has published a new point release of Rust, 1.68.2. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.68.2 with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1682-2023-03-28&quot;&gt;detailed release notes for 1.68.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1682-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1682-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.68.2 stable&lt;/h2&gt;
&lt;p&gt;Rust 1.68.2 addresses &lt;a href&#x3D;&quot;https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/&quot;&gt;GitHub&#x27;s recent rotation of their RSA SSH host
key&lt;/a&gt;, which
happened on March 24th 2023 after their previous key accidentally leaked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/11883&quot;&gt;GitHub&#x27;s RSA key bundled in Cargo has been
updated&lt;/a&gt;, to ensure systems
that haven&#x27;t interacted with GitHub yet won&#x27;t connect trusting the leaked
key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/11889&quot;&gt;The leaked key has been hardcoded as revoked in
Cargo&lt;/a&gt;, to ensure the key
won&#x27;t be used by Cargo even on systems that still trust the key.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/11635&quot;&gt;Support for &lt;code&gt;@revoked&lt;/code&gt; entries in
&lt;code&gt;.ssh/known_hosts&lt;/code&gt;&lt;/a&gt; (along with
a better error message when the unsupported &lt;code&gt;@cert-authority&lt;/code&gt; entries are used)
is also included in Rust 1.68.2, as that change was a pre-requisite for
backporting the hardcoded revocation.&lt;/p&gt;
&lt;p&gt;If you cannot upgrade to Rust 1.68.2, we recommend &lt;a href&#x3D;&quot;https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/#what-you-can-do&quot;&gt;following GitHub&#x27;s
instructions&lt;/a&gt;
on updating the trusted keys in your system. Note that the keys bundled in
Cargo are only used if no trusted key for &lt;code&gt;github.com&lt;/code&gt; is found on the system.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1682&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1682&quot;&gt;&lt;/a&gt;Contributors to 1.68.2&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.68.2. We couldn&#x27;t have done it
without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.68.2/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.68.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/03/23/Rust-1.68.1.html" type="text/html" title="Announcing Rust 1.68.1" />
        <published>2023-03-23T00:00:00+00:00</published>
        <updated>2023-03-23T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/03/23/Rust-1.68.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/03/23/Rust-1.68.1.html">&lt;p&gt;The Rust team has published a new point release of Rust, 1.68.1. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.68.1 with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1681-2023-03-23&quot;&gt;detailed release notes for 1.68.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1681-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1681-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.68.1 stable&lt;/h2&gt;
&lt;p&gt;Rust 1.68.1 stable primarily contains a change to how Rust&#x27;s CI builds the
Windows MSVC compiler, no longer enabling LTO for the Rust code. This led to a
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/109067&quot;&gt;miscompilation&lt;/a&gt; that the Rust
team is debugging, but in the meantime we&#x27;re reverting the change to enable
LTO.&lt;/p&gt;
&lt;p&gt;This is currently believed to have no effect on wider usage of ThinLTO. The
Rust compiler used an unstable flag as part of the build process to enable
ThinLTO despite compiling to a dylib.&lt;/p&gt;
&lt;p&gt;There are a few other regression fixes included in the release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/109111/&quot;&gt;Fix building the compiler with &lt;code&gt;--enable-local-rust&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/109156&quot;&gt;Treat &lt;code&gt;$prefix-clang&lt;/code&gt; as &lt;code&gt;clang&lt;/code&gt; in linker detection code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/108162&quot;&gt;Fix a panic in the compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1681&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1681&quot;&gt;&lt;/a&gt;Contributors to 1.68.1&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.68.1. We couldn&#x27;t have done it
without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.68.1/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.68.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html" type="text/html" title="Announcing Rust 1.68.0" />
        <published>2023-03-09T00:00:00+00:00</published>
        <updated>2023-03-09T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.68.0. Rust is a
programming language empowering everyone to build reliable and efficient
software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.68.0
with:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get
&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on
our website, and check out the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1680-2023-03-09&quot;&gt;detailed release notes for
1.68.0&lt;/a&gt;
on GitHub.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider
updating locally to use the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly
channel (&lt;code&gt;rustup default nightly&lt;/code&gt;). Please
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you
might come across!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1680-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1680-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.68.0 stable&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#cargos-sparse-protocol&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;cargos-sparse-protocol&quot;&gt;&lt;/a&gt;Cargo&#x27;s sparse protocol&lt;/h3&gt;
&lt;p&gt;Cargo&#x27;s &amp;quot;sparse&amp;quot; registry protocol has been stabilized for reading the index of
crates, along with infrastructure at &lt;code&gt;https://index.crates.io/&lt;/code&gt; for those
published in the primary crates.io registry. The prior git protocol (which is
still the default) clones a repository that indexes &lt;em&gt;all&lt;/em&gt; crates available in
the registry, but this has started to hit scaling limitations, with noticeable
delays while updating that repository. The new protocol should provide a
significant performance improvement when accessing crates.io, as it will only
download information about the subset of crates that you actually use.&lt;/p&gt;
&lt;p&gt;To use the sparse protocol with crates.io, set the environment variable
&lt;code&gt;CARGO_REGISTRIES_CRATES_IO_PROTOCOL&#x3D;sparse&lt;/code&gt;, or edit your
&lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/config.html&quot;&gt;&lt;code&gt;.cargo/config.toml&lt;/code&gt; file&lt;/a&gt;
to add:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-toml&quot;&gt;[registries.crates-io]
protocol &#x3D; &amp;quot;sparse&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The sparse protocol is currently planned to become the default for crates.io in
the 1.70.0 release in a few months. For more information, please see the prior
&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2023/01/30/cargo-sparse-protocol.html&quot;&gt;announcement&lt;/a&gt;
on the Inside Rust Blog, as well as
&lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2789-sparse-index.html&quot;&gt;RFC 2789&lt;/a&gt;
and the current
&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/cargo/reference/registry-index.html#sparse-protocol&quot;&gt;documentation&lt;/a&gt;
in the Cargo Book.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#local-pin-construction&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;local-pin-construction&quot;&gt;&lt;/a&gt;Local &lt;code&gt;Pin&lt;/code&gt; construction&lt;/h3&gt;
&lt;p&gt;The new &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/pin/macro.pin.html&quot;&gt;&lt;code&gt;pin!&lt;/code&gt;&lt;/a&gt; macro
constructs a &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; from a &lt;code&gt;T&lt;/code&gt; expression, anonymously captured in local
state. This is often called stack-pinning, but that &amp;quot;stack&amp;quot; could also be the
captured state of an &lt;code&gt;async fn&lt;/code&gt; or block. This macro is similar to some crates,
like &lt;a href&#x3D;&quot;https://docs.rs/tokio/1/tokio/macro.pin.html&quot;&gt;&lt;code&gt;tokio::pin!&lt;/code&gt;&lt;/a&gt;, but the
standard library can take advantage of &lt;code&gt;Pin&lt;/code&gt; internals and &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/reference/destructors.html#temporary-lifetime-extension&quot;&gt;temporary lifetime
extension&lt;/a&gt;
for a more expression-like macro.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;/// Runs a future to completion.
fn block_on&amp;lt;F: Future&amp;gt;(future: F) -&amp;gt; F::Output {
    let waker_that_unparks_thread &#x3D; todo!();
    let mut cx &#x3D; Context::from_waker(&amp;amp;waker_that_unparks_thread);
    // Pin the future so it can be polled.
    let mut pinned_future &#x3D; pin!(future);
    loop {
        match pinned_future.as_mut().poll(&amp;amp;mut cx) {
            Poll::Pending &#x3D;&amp;gt; thread::park(),
            Poll::Ready(result) &#x3D;&amp;gt; return result,
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the original &lt;code&gt;future&lt;/code&gt; will be moved into a temporary local,
referenced by the new &lt;code&gt;pinned_future&lt;/code&gt; with type &lt;code&gt;Pin&amp;lt;&amp;amp;mut F&amp;gt;&lt;/code&gt;, and that pin is
subject to the normal borrow checker to make sure it can&#x27;t outlive that local.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#default-alloc-error-handler&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;default-alloc-error-handler&quot;&gt;&lt;/a&gt;Default &lt;code&gt;alloc&lt;/code&gt; error handler&lt;/h3&gt;
&lt;p&gt;When allocation fails in Rust, APIs like &lt;code&gt;Box::new&lt;/code&gt; and &lt;code&gt;Vec::push&lt;/code&gt; have no way
to indicate that failure, so some divergent execution path needs to be taken.
When using the &lt;code&gt;std&lt;/code&gt; crate, the program will print to &lt;code&gt;stderr&lt;/code&gt; and abort.
As of Rust 1.68.0, binaries which include &lt;code&gt;std&lt;/code&gt; will continue to have
this behavior. Binaries which do not include &lt;code&gt;std&lt;/code&gt;, only including &lt;code&gt;alloc&lt;/code&gt;, will now &lt;code&gt;panic!&lt;/code&gt;
on allocation failure, which may be further adjusted via a &lt;code&gt;#[panic_handler]&lt;/code&gt; if desired.&lt;/p&gt;
&lt;p&gt;In the future, it&#x27;s likely that the behavior for &lt;code&gt;std&lt;/code&gt; will also be changed to match that of &lt;code&gt;alloc&lt;/code&gt;-only binaries.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/pin/macro.pin.html&quot;&gt;&lt;code&gt;{core,std}::pin::pin!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#impl-From%3Cbool%3E-for-f32&quot;&gt;&lt;code&gt;impl From&amp;lt;bool&amp;gt; for {f32,f64}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/path/constant.MAIN_SEPARATOR_STR.html&quot;&gt;&lt;code&gt;std::path::MAIN_SEPARATOR_STR&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html#impl-DerefMut-for-PathBuf&quot;&gt;&lt;code&gt;impl DerefMut for PathBuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These APIs are now stable in const contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.new&quot;&gt;&lt;code&gt;VecDeque::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;As &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2023/01/09/android-ndk-update-r25.html&quot;&gt;previously announced&lt;/a&gt;,
Android platform support in Rust is now targeting NDK r25, which corresponds to
a minimum supported API level of 19 (KitKat).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out everything that changed in
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1680-2023-03-09&quot;&gt;Rust&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-168-2023-03-09&quot;&gt;Cargo&lt;/a&gt;,
and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-168&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1680&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1680&quot;&gt;&lt;/a&gt;Contributors to 1.68.0&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.68.0.
We couldn&#x27;t have done it without all of you.
&lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.68.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.67.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/02/09/Rust-1.67.1.html" type="text/html" title="Announcing Rust 1.67.1" />
        <published>2023-02-09T00:00:00+00:00</published>
        <updated>2023-02-09T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/02/09/Rust-1.67.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/02/09/Rust-1.67.1.html">&lt;p&gt;The Rust team has published a new point release of Rust, 1.67.1. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.67.1 with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1671-2023-02-09&quot;&gt;detailed release notes for 1.67.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1671-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1671-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.67.1 stable&lt;/h2&gt;
&lt;p&gt;Rust 1.67.1 fixes a regression for projects that link to thin archives
(&lt;code&gt;.a&lt;/code&gt; files that reference external &lt;code&gt;.o&lt;/code&gt; objects). The new
archive writer in 1.67.0 could not read thin archives as inputs, leading to the
error &amp;quot;Unsupported archive identifier.&amp;quot; The compiler now uses LLVM&#x27;s archive
writer again, until that format is supported in the new code.&lt;/p&gt;
&lt;p&gt;Additionally, the clippy style lint &lt;code&gt;uninlined_format_args&lt;/code&gt; is temporarily
downgraded to pedantic -- allowed by default. While the compiler has supported
this format since Rust 1.58, &lt;code&gt;rust-analyzer&lt;/code&gt; does not support it yet, so it&#x27;s
not necessarily good to use that style everywhere possible.&lt;/p&gt;
&lt;p&gt;The final change is a soundness fix in Rust&#x27;s own bootstrap code. This had no
known problematic uses, but it did raise an error when bootstrap was compiled
with 1.67 itself, rather than the prior 1.66 release as usual.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1671&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1671&quot;&gt;&lt;/a&gt;Contributors to 1.67.1&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.67.1. We couldn&#x27;t have done it
without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.67.1/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rustup 1.25.2</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/02/01/Rustup-1.25.2.html" type="text/html" title="Announcing Rustup 1.25.2" />
        <published>2023-02-01T00:00:00+00:00</published>
        <updated>2023-02-01T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/02/01/Rustup-1.25.2.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/02/01/Rustup-1.25.2.html">&lt;p&gt;The rustup working group is announcing the release of rustup version 1.25.2.
Rustup is the recommended tool to install Rust, a programming language that is
empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.25.2 is as
easy as stopping any programs which may be using Rustup (e.g. closing your IDE)
and running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain
update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://rustup.rs/&quot;&gt;get rustup&lt;/a&gt; from the
appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-new-in-rustup-1252&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-new-in-rustup-1252&quot;&gt;&lt;/a&gt;What&#x27;s new in rustup 1.25.2&lt;/h2&gt;
&lt;p&gt;This version of rustup fixes a warning incorrectly saying that signature
verification failed for Rust releases. The warning was due to a dependency of
Rustup including a time-based check preventing the use of SHA-1 from February
1st, 2023 onwards.&lt;/p&gt;
&lt;p&gt;Unfortunately Rust&#x27;s release signing key uses SHA-1 to sign its subkeys, which
resulted in all signatures being marked as invalid. Rustup 1.25.2 temporarily
fixes the problem by allowing again the use of SHA-1.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#why-is-signature-verification-failure-only-a-warning&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;why-is-signature-verification-failure-only-a-warning&quot;&gt;&lt;/a&gt;Why is signature verification failure only a warning?&lt;/h2&gt;
&lt;p&gt;Signature verification is currently an experimental and incomplete feature
included in rustup, as it&#x27;s still missing crucial features like key rotation.
Until the feature is complete and ready for use, its outcomes are only
displayed as warnings without a way to turn them into errors.&lt;/p&gt;
&lt;p&gt;This is done to avoid potentially breaking installations of rustup. Signature
verification will error out on failure only after the design and implementation
of the feature will be finished.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks again to all the contributors who made rustup 1.25.2 possible!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Daniel Silverstone (kinnison)&lt;/li&gt;
&lt;li&gt;Pietro Albini (pietroalbini)&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>The rustup working group</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.67.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/01/26/Rust-1.67.0.html" type="text/html" title="Announcing Rust 1.67.0" />
        <published>2023-01-26T00:00:00+00:00</published>
        <updated>2023-01-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/01/26/Rust-1.67.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/01/26/Rust-1.67.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.67.0. Rust is a
programming language empowering everyone to build reliable and efficient
software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.67.0
with:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get
&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on
our website, and check out the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1670-2023-01-26&quot;&gt;detailed release notes for
1.67.0&lt;/a&gt;
on GitHub.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider
updating locally to use the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly
channel (&lt;code&gt;rustup default nightly&lt;/code&gt;). Please
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you
might come across!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1670-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1670-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.67.0 stable&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#must_use-effective-on-async-fn&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;must_use-effective-on-async-fn&quot;&gt;&lt;/a&gt;&lt;code&gt;#[must_use]&lt;/code&gt; effective on &lt;code&gt;async fn&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; functions annotated with &lt;code&gt;#[must_use]&lt;/code&gt; now apply that attribute to the
output of the returned &lt;code&gt;impl Future&lt;/code&gt;. The &lt;code&gt;Future&lt;/code&gt; trait itself is already
annotated with &lt;code&gt;#[must_use]&lt;/code&gt;, so all types implementing &lt;code&gt;Future&lt;/code&gt; are
automatically &lt;code&gt;#[must_use]&lt;/code&gt;, which meant that previously there was no way to
indicate that the output of the &lt;code&gt;Future&lt;/code&gt; is itself significant and should be used in some way.&lt;/p&gt;
&lt;p&gt;With 1.67, the compiler will now warn if the output isn&#x27;t used in some way.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;#[must_use]
async fn bar() -&amp;gt; u32 { 0 }

async fn caller() {
    bar().await;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;warning: unused output of future returned by &#x60;bar&#x60; that must be used
 --&amp;gt; src/lib.rs:5:5
  |
5 |     bar().await;
  |     ^^^^^^^^^^^
  |
  &#x3D; note: &#x60;#[warn(unused_must_use)]&#x60; on by default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stdsyncmpsc-implementation-updated&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stdsyncmpsc-implementation-updated&quot;&gt;&lt;/a&gt;&lt;code&gt;std::sync::mpsc&lt;/code&gt; implementation updated&lt;/h3&gt;
&lt;p&gt;Rust&#x27;s standard library has had a multi-producer, single-consumer channel since
before 1.0, but in this release the implementation is switched out to be based
on &lt;a href&#x3D;&quot;https://crates.io/crates/crossbeam-channel&quot;&gt;&lt;code&gt;crossbeam-channel&lt;/code&gt;&lt;/a&gt;. This
release contains no API changes, but the new implementation fixes a number of
bugs and improves the performance and maintainability of the implementation.&lt;/p&gt;
&lt;p&gt;Users should not notice any significant changes in behavior as of this release.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.i32.html#method.checked_ilog&quot;&gt;&lt;code&gt;{integer}::checked_ilog&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.i32.html#method.checked_ilog2&quot;&gt;&lt;code&gt;{integer}::checked_ilog2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.i32.html#method.checked_ilog10&quot;&gt;&lt;code&gt;{integer}::checked_ilog10&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.i32.html#method.ilog&quot;&gt;&lt;code&gt;{integer}::ilog&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.i32.html#method.ilog2&quot;&gt;&lt;code&gt;{integer}::ilog2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.i32.html#method.ilog10&quot;&gt;&lt;code&gt;{integer}::ilog10&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/num/struct.NonZeroU32.html#method.ilog2&quot;&gt;&lt;code&gt;NonZeroU*::ilog2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/num/struct.NonZeroU32.html#method.ilog10&quot;&gt;&lt;code&gt;NonZeroU*::ilog10&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/num/struct.NonZeroU32.html#associatedconstant.BITS&quot;&gt;&lt;code&gt;NonZero*::BITS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These APIs are now stable in const contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.char.html#method.from_u32&quot;&gt;&lt;code&gt;char::from_u32&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.char.html#method.from_digit&quot;&gt;&lt;code&gt;char::from_digit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.char.html#method.to_digit&quot;&gt;&lt;code&gt;char::to_digit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/char/fn.from_u32.html&quot;&gt;&lt;code&gt;core::char::from_u32&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/char/fn.from_digit.html&quot;&gt;&lt;code&gt;core::char::from_digit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out everything that changed in
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1670-2023-01-26&quot;&gt;Rust&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-167-2023-01-26&quot;&gt;Cargo&lt;/a&gt;,
and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-167&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1670&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1670&quot;&gt;&lt;/a&gt;Contributors to 1.67.0&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.67.0.
We couldn&#x27;t have done it without all of you.
&lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.67.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
</feed>
